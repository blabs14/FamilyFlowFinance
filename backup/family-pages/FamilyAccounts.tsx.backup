import React, { useState } from 'react';
import { useFamily } from './FamilyProvider';
import { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';
import { Button } from '../../components/ui/button';
import { Badge } from '../../components/ui/badge';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '../../components/ui/dialog';
import { Wallet, Plus, Edit, Trash2, ArrowRightLeft, Target, CreditCard, AlertTriangle, DollarSign } from 'lucide-react';
import { formatCurrency } from '../../lib/utils';
import { AccountWithBalances } from '../../integrations/supabase/types';
import { ConfirmationDialog } from '../../components/ui/confirmation-dialog';
import { Alert, AlertDescription } from '../../components/ui/alert';
import { LoadingSpinner } from '../../components/ui/loading-states';
import { useToast } from '../../hooks/use-toast';
import { useConfirmation } from '../../hooks/useConfirmation';
import AccountForm from '../../components/AccountForm';
import { TransferModal } from '../../components/TransferModal';

const FamilyAccounts: React.FC = () => {
  const { 
    family,
    familyAccounts, 
    familyCards,
    isLoading,
    createFamilyAccount,
    updateFamilyAccount,
    deleteFamilyAccount,
    createFamilyTransaction,
    canEdit,
    canDelete,
    refetchAll
  } = useFamily();

  const { toast } = useToast();
  const confirmation = useConfirmation();

  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showTransferModal, setShowTransferModal] = useState(false);
  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);
  const [showPayCardModal, setShowPayCardModal] = useState(false);
  const [accountToDelete, setAccountToDelete] = useState<{ id: string; nome: string } | null>(null);
  const [editingAccount, setEditingAccount] = useState<{
    id?: string;
    nome: string;
    tipo: string;
    saldoAtual?: number;
    ajusteSaldo?: number | string;
  } | null>(null);
  const [selectedCardForPayment, setSelectedCardForPayment] = useState<AccountWithBalances | null>(null);
  const [isCreatingCard, setIsCreatingCard] = useState(false);

  const handleNew = () => {
    setEditingAccount(null);
    setIsCreatingCard(false);
    setShowCreateModal(true);
  };

  const handleNewCard = () => {
    setEditingAccount(null);
    setIsCreatingCard(true);
    setShowCreateModal(true);
  };

  const handleTransfer = () => {
    setShowTransferModal(true);
  };

  const handleTransferSuccess = () => {
    setShowTransferModal(false);
    refetchAll();
    toast({
      title: 'Transferência realizada',
      description: 'A transferência foi processada com sucesso.',
    });
  };

  const handlePayCard = (card: AccountWithBalances) => {
    setSelectedCardForPayment(card);
    setShowPayCardModal(true);
  };

  const handlePayCardSuccess = () => {
    setShowPayCardModal(false);
    setSelectedCardForPayment(null);
    refetchAll();
    toast({
      title: 'Pagamento realizado',
      description: 'O pagamento do cartão foi processado com sucesso.',
    });
  };

  const handleEdit = (account: AccountWithBalances) => {
    // Converter AccountWithBalances para AccountFormData
    const accountFormData = {
      id: account.account_id,
      nome: account.nome,
      tipo: account.tipo,
      saldoAtual: account.saldo_atual || 0,
      ajusteSaldo: 0
    };
    setEditingAccount(accountFormData as any);
    setIsCreatingCard(account.tipo === 'cartão de crédito');
    setShowEditModal(true);
  };

  const handleSuccess = async (data: any) => {
    try {
      if (editingAccount) {
        await updateFamilyAccount(editingAccount.id!, data);
        toast({
          title: 'Conta atualizada',
          description: 'A conta familiar foi atualizada com sucesso.',
        });
      } else {
        await createFamilyAccount(data);
        toast({
          title: 'Conta criada',
          description: 'A conta familiar foi criada com sucesso.',
        });
      }
      setShowCreateModal(false);
      setShowEditModal(false);
      setEditingAccount(null);
      refetchAll();
    } catch (error: any) {
      toast({
        title: 'Erro',
        description: error.message || 'Ocorreu um erro ao processar a conta.',
        variant: 'destructive',
      });
    }
  };

  const handleDeleteAccount = (account: AccountWithBalances) => {
    confirmation.confirm(
      {
        title: 'Eliminar Conta Familiar',
        message: `Tem a certeza que deseja eliminar a conta "${account.nome}"? Esta ação não pode ser desfeita e todos os dados associados serão perdidos.`,
        confirmText: 'Eliminar',
        cancelText: 'Cancelar',
        variant: 'destructive',
      },
      async () => {
        try {
          await deleteFamilyAccount(account.account_id);
          toast({
            title: 'Conta eliminada',
            description: 'A conta familiar foi eliminada com sucesso.',
          });
          refetchAll();
        } catch (error: any) {
          toast({
            title: 'Erro',
            description: error.message || 'Ocorreu um erro ao eliminar a conta.',
            variant: 'destructive',
          });
        }
      }
    );
  };

  // Filtrar contas bancárias e cartões
  const bankAccounts = familyAccounts?.filter(account => account.tipo !== 'cartão de crédito') || [];
  const creditCards = familyCards || [];

  if (isLoading.accounts) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  return (
    <div className="space-y-6 p-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-xl font-semibold flex items-center gap-2">
            <Wallet className="h-5 w-5" />
            Contas Familiares
          </h2>
          <p className="text-sm text-muted-foreground">
            Contas partilhadas e cartões de crédito da família
          </p>
        </div>
        <div className="flex gap-2">
          {canEdit('account') && (
            <>
              <Button onClick={handleTransfer} variant="outline">
                <ArrowRightLeft className="h-4 w-4 mr-2" />
                Transferir
              </Button>
              <Button onClick={handleNew}>
                <Plus className="h-4 w-4 mr-2" />
                Nova Conta
              </Button>
            </>
          )}
        </div>
      </div>

      {/* Contas Bancárias */}
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-semibold flex items-center gap-2">
              <Wallet className="h-5 w-5" />
              Contas Bancárias
            </h3>
            <p className="text-sm text-muted-foreground">
              Contas correntes e poupanças partilhadas
            </p>
          </div>
          {canEdit('account') && (
            <Button onClick={handleNew} variant="outline" size="sm">
              <Plus className="h-4 w-4 mr-2" />
              Nova Conta
            </Button>
          )}
        </div>

        {bankAccounts.length === 0 ? (
          <div className="text-center py-8 border border-dashed border-gray-200 rounded-lg">
            <Wallet className="h-8 w-8 text-muted-foreground mx-auto mb-2" />
            <p className="text-sm text-muted-foreground">Nenhuma conta bancária encontrada</p>
            {canEdit('account') && (
              <Button onClick={handleNew} variant="outline" size="sm" className="mt-4">
                <Plus className="h-4 w-4 mr-2" />
                Criar Primeira Conta
              </Button>
            )}
          </div>
        ) : (
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {bankAccounts.map((account) => (
              <Card key={account.account_id} className="hover:shadow-md transition-shadow">
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg">{account.nome}</CardTitle>
                    <Badge variant="outline" className="capitalize">
                      {account.tipo}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Saldo Total */}
                  <div className="space-y-1">
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-muted-foreground">Saldo Total</span>
                      <span className="text-lg font-semibold">
                        {formatCurrency(account.saldo_atual || 0)}
                      </span>
                    </div>
                    <p className="text-xs text-muted-foreground capitalize">{account.tipo}</p>
                  </div>

                  {/* Saldo Reservado */}
                  {account.total_reservado > 0 && (
                    <div className="space-y-1">
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-muted-foreground flex items-center gap-1">
                          <Target className="h-3 w-3" />
                          Reservado
                        </span>
                        <Badge variant="secondary" className="text-xs text-blue-600 bg-blue-50 border-blue-200">
                          {formatCurrency(account.total_reservado)}
                        </Badge>
                      </div>
                    </div>
                  )}

                  {/* Saldo Disponível */}
                  <div className="space-y-1">
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-muted-foreground">Disponível</span>
                      <span className={`text-sm font-medium ${
                        account.saldo_disponivel < 0 ? 'text-red-600' : 'text-green-600'
                      }`}>
                        {formatCurrency(account.saldo_disponivel)}
                      </span>
                    </div>
                  </div>

                  {/* Botões de ação - Editar e Eliminar */}
                  {canEdit('account') && (
                    <div className="flex gap-2 pt-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleEdit(account)}
                        className="flex-1"
                      >
                        <Edit className="h-4 w-4 mr-1" />
                        Editar
                      </Button>
                      {canDelete('account') && (
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleDeleteAccount(account)}
                          className="text-red-600 hover:text-red-700 hover:bg-red-50"
                        >
                          <Trash2 className="h-4 w-4 mr-1" />
                          Eliminar
                        </Button>
                      )}
                    </div>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>

      {/* Cartões de Crédito */}
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-semibold flex items-center gap-2">
              <CreditCard className="h-5 w-5" />
              Cartões de Crédito
            </h3>
            <p className="text-sm text-muted-foreground">
              Cartões de crédito partilhados
            </p>
          </div>
          {canEdit('account') && (
            <Button onClick={handleNewCard} variant="outline" size="sm">
              <Plus className="h-4 w-4 mr-2" />
              Novo Cartão
            </Button>
          )}
        </div>

        {creditCards.length === 0 ? (
          <div className="text-center py-8 border border-dashed border-gray-200 rounded-lg">
            <CreditCard className="h-8 w-8 text-muted-foreground mx-auto mb-2" />
            <p className="text-sm text-muted-foreground">Nenhum cartão de crédito encontrado</p>
            {canEdit('account') && (
              <Button onClick={handleNewCard} variant="outline" size="sm" className="mt-4">
                <Plus className="h-4 w-4 mr-2" />
                Criar Primeiro Cartão
              </Button>
            )}
          </div>
        ) : (
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {creditCards.map((account) => (
              <Card key={account.account_id} className="hover:shadow-md transition-shadow">
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg">{account.nome}</CardTitle>
                    <Badge variant="outline" className="capitalize">
                      {account.tipo}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Saldo */}
                  <div className="space-y-1">
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-muted-foreground">Saldo</span>
                      <span className={`text-lg font-semibold ${
                        (account.saldo_atual || 0) > 0 ? 'text-red-600' : 'text-green-600'
                      }`}>
                        {formatCurrency(account.saldo_atual || 0)}
                      </span>
                    </div>
                    <p className="text-xs text-muted-foreground capitalize">{account.tipo}</p>
                  </div>

                  {/* Limite */}
                  <div className="space-y-1">
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-muted-foreground">Limite</span>
                      <span className="text-sm font-medium">
                        {formatCurrency(account.limite || 0)}
                      </span>
                    </div>
                  </div>

                  {/* Botões de ação - Pagar, Editar e Eliminar */}
                  {canEdit('account') && (
                    <div className="flex gap-2 pt-2">
                      {account.saldo_atual > 0 && (
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handlePayCard(account)}
                          className="flex-1 text-green-600 hover:text-green-700 hover:bg-green-50"
                        >
                          <DollarSign className="h-4 w-4 mr-1" />
                          Pagar
                        </Button>
                      )}
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleEdit(account)}
                        className="flex-1"
                      >
                        <Edit className="h-4 w-4 mr-1" />
                        Editar
                      </Button>
                      {canDelete('account') && (
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleDeleteAccount(account)}
                          className="text-red-600 hover:text-red-700 hover:bg-red-50"
                        >
                          <Trash2 className="h-4 w-4 mr-1" />
                          Eliminar
                        </Button>
                      )}
                    </div>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>

      {/* Create Account Modal */}
      <Dialog open={showCreateModal} onOpenChange={setShowCreateModal}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>
              {isCreatingCard ? 'Novo Cartão de Crédito Familiar' : 'Nova Conta Familiar'}
            </DialogTitle>
            <DialogDescription>
              {isCreatingCard 
                ? 'Cria um novo cartão de crédito partilhado pela família'
                : 'Cria uma nova conta bancária partilhada pela família'
              }
            </DialogDescription>
          </DialogHeader>
          <AccountForm
            onSuccess={() => handleSuccess({})}
            onCancel={() => setShowCreateModal(false)}
          />
        </DialogContent>
      </Dialog>

      {/* Edit Account Modal */}
      <Dialog open={showEditModal} onOpenChange={setShowEditModal}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>
              {isCreatingCard ? 'Editar Cartão de Crédito Familiar' : 'Editar Conta Familiar'}
            </DialogTitle>
            <DialogDescription>
              {isCreatingCard 
                ? 'Edita os dados do cartão de crédito familiar'
                : 'Edita os dados da conta familiar'
              }
            </DialogDescription>
          </DialogHeader>
          <AccountForm
            initialData={editingAccount}
            onSuccess={() => handleSuccess({})}
            onCancel={() => {
              setShowEditModal(false);
              setEditingAccount(null);
            }}
          />
        </DialogContent>
      </Dialog>

      {/* Transfer Modal */}
      {showTransferModal && (
        <TransferModal
          isOpen={showTransferModal}
          onClose={handleTransferSuccess}
        />
      )}

      {/* Confirmation Dialog */}
      <ConfirmationDialog
        isOpen={confirmation.isOpen}
        onClose={confirmation.close}
        onConfirm={confirmation.onConfirm}
        onCancel={confirmation.onCancel}
        title={confirmation.options.title}
        message={confirmation.options.message}
        confirmText={confirmation.options.confirmText}
        cancelText={confirmation.options.cancelText}
        variant={confirmation.options.variant}
      />
    </div>
  );
};

export default FamilyAccounts; 