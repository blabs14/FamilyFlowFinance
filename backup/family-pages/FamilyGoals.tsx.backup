import React, { useState, useEffect } from 'react';
import { useFamily } from './FamilyProvider';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';
import { Progress } from '../../components/ui/progress';
import { Badge } from '../../components/ui/badge';
import { Button } from '../../components/ui/button';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '../../components/ui/dialog';
import { Target, Plus, Edit, Trash2, Calendar, CheckCircle, Trophy } from 'lucide-react';
import { LoadingSpinner } from '../../components/ui/loading-states';
import { useToast } from '../../hooks/use-toast';
import { formatCurrency } from '../../lib/utils';
import { GoalAllocationModal } from '../../components/GoalAllocationModal';
import GoalForm from '../../components/GoalForm';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '../../components/ui/tooltip';
import { useConfirmation } from '../../hooks/useConfirmation';
import { ConfirmationDialog } from '../../components/ui/confirmation-dialog';
import { useAuth } from '../../contexts/AuthContext';

const FamilyGoals: React.FC = () => {
  const {
    familyGoals,
    isLoading,
    canEdit,
    canDelete,
    createFamilyGoal,
    updateFamilyGoal,
    deleteFamilyGoal,
    allocateToGoal,
    family,
    myRole,
    refetchAll
  } = useFamily();

  const { user, loading: authLoading } = useAuth();

  // Debug effect
  useEffect(() => {
    if (process.env.NODE_ENV === 'development') {
      console.log('FamilyGoals Debug:', {
        user: user?.id,
        userEmail: user?.email,
        authLoading,
        familyGoals: familyGoals?.length || 0,
        goalsLoading: isLoading.goals,
        canEdit: canEdit('goal'),
        canDelete: canDelete('goal'),
        family: family?.id,
        myRole
      });
    }
  }, [user, authLoading, familyGoals, isLoading.goals, canEdit, canDelete, family, myRole]);

  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showAllocationModal, setShowAllocationModal] = useState(false);
  const [selectedGoal, setSelectedGoal] = useState<any | null>(null);
  const [editingGoal, setEditingGoal] = useState<any>(null);
  
  const { toast } = useToast();
  const confirmation = useConfirmation();

  // Debug logs
  console.log('[FamilyGoals] familyGoals:', familyGoals);
  console.log('[FamilyGoals] isLoading:', isLoading);
  console.log('[FamilyGoals] canEdit:', canEdit);
  console.log('[FamilyGoals] canDelete:', canDelete);

  const handleCreateGoal = () => {
    setShowCreateModal(true);
  };

  const handleAllocationSuccess = () => {
    setShowAllocationModal(false);
    setSelectedGoal(null);
    toast({
      title: 'Aloca√ß√£o realizada',
      description: 'Valor alocado com sucesso ao objetivo familiar!',
    });
    refetchAll();
  };

  const handleAllocateToGoal = (goal: any) => {
    setSelectedGoal(goal);
    setShowAllocationModal(true);
  };

  const handleEditGoal = (goal: any) => {
    setEditingGoal(goal);
    setShowEditModal(true);
  };

  const handleDeleteGoal = async (goalId: string) => {
    // Encontrar o objetivo para mostrar informa√ß√µes espec√≠ficas
    const goal = familyGoals.find(g => g.id === goalId);
    const isCompleted = goal?.progresso_percentual >= 100;
    
    let message = 'Tem a certeza que deseja eliminar este objetivo familiar? Esta a√ß√£o n√£o pode ser desfeita.';
    
    if (goal) {
      if (isCompleted) {
        message = `O objetivo "${goal.nome}" foi atingido a 100%. Ao eliminar, o valor alocado (${formatCurrency(goal.total_alocado || 0)}) ser√° mantido na conta objetivos e n√£o ser√° restitu√≠do √† conta original.`;
      } else {
        message = `O objetivo "${goal.nome}" est√° a ${goal.progresso_percentual || 0}%. Ao eliminar, o valor alocado (${formatCurrency(goal.total_alocado || 0)}) ser√° restitu√≠do ao saldo dispon√≠vel da conta original.`;
      }
    }
    
    confirmation.confirm(
      {
        title: 'Eliminar Objetivo Familiar',
        message: message,
        confirmText: 'Eliminar',
        cancelText: 'Cancelar',
        variant: 'destructive',
      },
      async () => {
        try {
          await deleteFamilyGoal(goalId);
          toast({
            title: 'Objetivo eliminado',
            description: 'O objetivo familiar foi eliminado com sucesso.',
          });
          refetchAll();
        } catch (error: any) {
          toast({
            title: 'Erro',
            description: error.message || 'Ocorreu um erro ao eliminar o objetivo.',
            variant: 'destructive',
          });
        }
      }
    );
  };

  const handleCreateSuccess = async () => {
    try {
      await createFamilyGoal({});
      toast({
        title: 'Objetivo criado',
        description: 'O objetivo familiar foi criado com sucesso.',
      });
      setShowCreateModal(false);
      refetchAll();
    } catch (error: any) {
      toast({
        title: 'Erro',
        description: error.message || 'Ocorreu um erro ao criar o objetivo.',
        variant: 'destructive',
      });
    }
  };

  const handleEditSuccess = async () => {
    try {
      if (editingGoal) {
        await updateFamilyGoal(editingGoal.id, {});
        toast({
          title: 'Objetivo atualizado',
          description: 'O objetivo familiar foi atualizado com sucesso.',
        });
      }
      setShowEditModal(false);
      setEditingGoal(null);
      refetchAll();
    } catch (error: any) {
      toast({
        title: 'Erro',
        description: error.message || 'Ocorreu um erro ao atualizar o objetivo.',
        variant: 'destructive',
      });
    }
  };

  const getProgressText = (progress: number) => {
    if (progress >= 100) return 'Objetivo Atingido! üéâ';
    if (progress >= 80) return 'Quase l√°!';
    if (progress >= 50) return 'A meio caminho!';
    if (progress >= 25) return 'Bom come√ßo!';
    return 'A come√ßar...';
  };

  if (isLoading.goals) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  return (
    <div className="space-y-6 p-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-xl font-semibold flex items-center gap-2">
            <Target className="h-5 w-5" />
            Objetivos Familiares
          </h2>
          <p className="text-sm text-muted-foreground">
            Metas financeiras e objetivos de poupan√ßa partilhados pela fam√≠lia
          </p>
        </div>
        {canEdit('goal') && (
          <Button onClick={handleCreateGoal}>
            <Plus className="h-4 w-4 mr-2" />
            Novo Objetivo
          </Button>
        )}
      </div>

      {/* Goals Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {familyGoals.map((goal) => {
          const isCompleted = (goal.progresso_percentual || 0) >= 100;
          const remaining = Math.max((goal.valor_objetivo || 0) - (goal.total_alocado || 0), 0);

          return (
            <Card 
              key={goal.id} 
              className={`hover:shadow-lg transition-shadow ${
                isCompleted ? 'border-green-200 bg-green-50' : ''
              }`}
            >
              <CardHeader>
                <div className="space-y-2">
                  <div className="flex justify-between items-start">
                    <CardTitle className="flex items-center gap-2">
                      {isCompleted ? (
                        <Trophy className="h-5 w-5 text-yellow-600" />
                      ) : (
                        <Target className="h-5 w-5 text-blue-600" />
                      )}
                      {goal.nome}
                    </CardTitle>
                    <div className="flex gap-1">
                      {!isCompleted && canEdit('goal') ? (
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleAllocateToGoal(goal)}
                          className="h-8 w-8 p-0"
                        >
                          <Plus className="h-4 w-4" />
                        </Button>
                      ) : (
                        <TooltipProvider>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Button
                                variant="outline"
                                size="sm"
                                disabled
                                className="h-8 w-8 p-0 opacity-50 cursor-not-allowed"
                              >
                                <Plus className="h-4 w-4" />
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p>Objetivo j√° atingido! Edite o valor objetivo ou o valor atual para continuar.</p>
                            </TooltipContent>
                          </Tooltip>
                        </TooltipProvider>
                      )}
                      {canEdit('goal') && (
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleEditGoal(goal)}
                          className="h-8 w-8 p-0"
                        >
                          <Edit className="h-4 w-4" />
                        </Button>
                      )}
                      {canDelete('goal') && (
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleDeleteGoal(goal.id)}
                          className="h-8 w-8 p-0 text-red-600 hover:text-red-700"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      )}
                    </div>
                  </div>
                  
                  {isCompleted && (
                    <Badge variant="secondary" className="bg-green-100 text-green-800 border-green-200 w-fit">
                      <CheckCircle className="h-3 w-3 mr-1" />
                      Atingido
                    </Badge>
                  )}
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Progress */}
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">Progresso</span>
                    <span className={`font-medium ${isCompleted ? 'text-green-600' : ''}`}>
                      {goal.progresso_percentual || 0}%
                    </span>
                  </div>
                  <Progress 
                    value={Math.min(goal.progresso_percentual || 0, 100)} 
                    className={`h-2 ${isCompleted ? 'bg-green-100' : ''}`}
                  />
                  <div className="flex justify-between text-xs text-muted-foreground">
                    <span className={isCompleted ? 'text-green-600 font-medium' : ''}>
                      {isCompleted ? 'Objetivo Atingido! üéâ' : getProgressText(goal.progresso_percentual || 0)}
                    </span>
                    <span className="text-right">
                      {formatCurrency(goal.total_alocado || 0)} / {formatCurrency(goal.valor_objetivo || 0)}
                    </span>
                  </div>
                </div>

                {/* Values */}
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-muted-foreground">Objetivo</span>
                    <span className="font-medium">{formatCurrency(goal.valor_objetivo || 0)}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-muted-foreground">Alocado</span>
                    <span className={`font-medium ${isCompleted ? 'text-green-600' : 'text-green-600'}`}>
                      {formatCurrency(goal.total_alocado || 0)}
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-muted-foreground">Restante</span>
                    <span className={`font-medium ${isCompleted ? 'text-green-600' : remaining > 0 ? 'text-orange-600' : 'text-green-600'}`}>
                      {isCompleted ? '0,00‚Ç¨' : formatCurrency(remaining)}
                    </span>
                  </div>
                </div>

                {isCompleted && (
                  <div className="mt-4 p-3 bg-green-50 border border-green-200 rounded-lg">
                    <div className="flex items-center gap-2 text-green-800">
                      <CheckCircle className="h-4 w-4 flex-shrink-0" />
                      <span className="text-sm font-medium">Parab√©ns! Objetivo familiar atingido com sucesso!</span>
                    </div>
                    <p className="text-xs text-green-600 mt-1 leading-relaxed">
                      Para continuar a alocar valores, edite o objetivo e aumente o valor alvo ou reduza o valor atual.
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>
          );
        })}
      </div>

      {/* Empty State */}
      {familyGoals.length === 0 && (
        <div className="text-center py-12">
          <Target className="h-12 w-12 mx-auto mb-4 text-muted-foreground" />
          <h3 className="text-lg font-medium mb-2">Nenhum objetivo familiar encontrado</h3>
          <p className="text-muted-foreground mb-4">
            Clica em "Novo Objetivo" para come√ßar a planear as metas financeiras da fam√≠lia
          </p>
          {canEdit('goal') && (
            <Button onClick={handleCreateGoal}>
              <Plus className="h-4 w-4 mr-2" />
              Criar Primeiro Objetivo
            </Button>
          )}
        </div>
      )}

      {/* Create Goal Modal */}
      <Dialog open={showCreateModal} onOpenChange={setShowCreateModal}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Novo Objetivo Familiar</DialogTitle>
            <DialogDescription>
              Cria um novo objetivo partilhado pela fam√≠lia
            </DialogDescription>
          </DialogHeader>
          <GoalForm
            onSuccess={handleCreateSuccess}
            onCancel={() => setShowCreateModal(false)}
          />
        </DialogContent>
      </Dialog>

      {/* Edit Goal Modal */}
      <Dialog open={showEditModal} onOpenChange={setShowEditModal}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Editar Objetivo Familiar</DialogTitle>
            <DialogDescription>
              Edita os dados do objetivo familiar
            </DialogDescription>
          </DialogHeader>
          <GoalForm
            initialData={editingGoal}
            onSuccess={handleEditSuccess}
            onCancel={() => {
              setShowEditModal(false);
              setEditingGoal(null);
            }}
          />
        </DialogContent>
      </Dialog>

      {/* Allocation Modal */}
      {showAllocationModal && selectedGoal && (
        <GoalAllocationModal
          isOpen={showAllocationModal}
          onClose={handleAllocationSuccess}
          goalId={selectedGoal.id}
          goalName={selectedGoal.nome}
          currentProgress={selectedGoal.total_alocado || 0}
          targetAmount={selectedGoal.valor_objetivo || 0}
        />
      )}

      {/* Confirmation Dialog */}
      <ConfirmationDialog
        isOpen={confirmation.isOpen}
        onClose={confirmation.close}
        onConfirm={confirmation.onConfirm}
        onCancel={confirmation.onCancel}
        title={confirmation.options.title}
        message={confirmation.options.message}
        confirmText={confirmation.options.confirmText}
        cancelText={confirmation.options.cancelText}
        variant={confirmation.options.variant}
      />
    </div>
  );
};

export default FamilyGoals; 