// Teste simples para verificar valida√ß√µes UUID
import { getSubsidyConfig } from './src/features/payroll/services/subsidyDatabaseService.ts';
import { syncConfiguration } from './src/features/payroll/services/configSyncService.ts';

// Teste com UUID inv√°lido
console.log('Testando valida√ß√µes UUID...');

async function testValidations() {
    // Teste com UUID inv√°lido
    try {
        await getSubsidyConfig('invalid-uuid');
        console.log('‚ùå ERRO: Deveria ter falhado com UUID inv√°lido');
    } catch (error) {
        console.log('‚úÖ SUCESSO: Valida√ß√£o UUID funcionou:', error.message);
    }

    // Teste com UUID v√°lido
    try {
        const validUUID = '550e8400-e29b-41d4-a716-446655440000';
        console.log('üîÑ Testando UUID v√°lido:', validUUID);
        // Esta chamada pode falhar por outros motivos (ex: contrato n√£o existe)
        // mas n√£o deve falhar por valida√ß√£o UUID
        await syncConfiguration(validUUID);
        console.log('‚úÖ SUCESSO: UUID v√°lido aceite');
    } catch (error) {
        if (error.message.includes('contractId deve ser um UUID v√°lido')) {
            console.log('‚ùå ERRO: UUID v√°lido foi rejeitado');
        } else {
            console.log('‚úÖ SUCESSO: UUID v√°lido aceite (falhou por outro motivo):', error.message);
        }
    }
}

testValidations().catch(console.error);

console.log('Teste de valida√ß√£o UUID conclu√≠do.');