// Diagn√≥stico completo do ambiente Supabase
// Para usar no console do navegador (F12)

// Vari√°veis do Supabase (obtidas do .env.local)
const SUPABASE_URL = 'https://ebitcwrrcumsvqjgrapw.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImViaXRjd3JyY3Vtc3ZxamdyYXB3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI3NjcyMTYsImV4cCI6MjA2ODM0MzIxNn0.hLlTeSD2VzVCjvUSXLYQypXNYqthDx0q1N86aOftfEY';

function diagnoseEnvironment() {
  console.log('üîç [Diagnose] Iniciando diagn√≥stico do ambiente...');
  console.log('=' .repeat(50));
  
  // 1. Verificar vari√°veis de ambiente
  console.log('üìã [Env] Verificando vari√°veis de ambiente...');
  
  // Tentar obter do import.meta.env (se dispon√≠vel)
  let envUrl, envKey;
  try {
    if (typeof import !== 'undefined' && import.meta && import.meta.env) {
      envUrl = import.meta.env.VITE_SUPABASE_URL;
      envKey = import.meta.env.VITE_SUPABASE_ANON_KEY;
      console.log('‚úÖ [Env] import.meta.env dispon√≠vel');
    }
  } catch (e) {
    console.log('‚ö†Ô∏è [Env] import.meta.env n√£o dispon√≠vel:', e.message);
  }
  
  // Usar valores hardcoded como fallback
  const finalUrl = envUrl || SUPABASE_URL;
  const finalKey = envKey || SUPABASE_ANON_KEY;
  
  console.log('üåê [Env] URL:', finalUrl);
  console.log('üîë [Env] Key:', finalKey ? finalKey.substring(0, 20) + '...' : 'N√ÉO DEFINIDA');
  
  // 2. Verificar se estamos numa aplica√ß√£o React
  console.log('\n‚öõÔ∏è [React] Verificando contexto React...');
  if (typeof window !== 'undefined') {
    console.log('‚úÖ [React] Window dispon√≠vel');
    
    // Verificar se React est√° carregado
    if (window.React) {
      console.log('‚úÖ [React] React encontrado:', window.React.version || 'vers√£o desconhecida');
    } else {
      console.log('‚ö†Ô∏è [React] React n√£o encontrado globalmente');
    }
    
    // Verificar elementos React na p√°gina
    const reactElements = document.querySelectorAll('[data-reactroot], [data-react-helmet]');
    console.log('üìä [React] Elementos React encontrados:', reactElements.length);
  }
  
  // 3. Verificar localStorage
  console.log('\nüíæ [Storage] Verificando localStorage...');
  try {
    const keys = Object.keys(localStorage);
    console.log('üìã [Storage] Chaves encontradas:', keys.length);
    
    // Procurar chaves relacionadas com Supabase
    const supabaseKeys = keys.filter(key => key.includes('supabase'));
    console.log('üîë [Storage] Chaves Supabase:', supabaseKeys);
    
    supabaseKeys.forEach(key => {
      const value = localStorage.getItem(key);
      console.log(`üìÑ [Storage] ${key}:`, value ? value.substring(0, 100) + '...' : 'vazio');
    });
  } catch (e) {
    console.error('‚ùå [Storage] Erro ao aceder localStorage:', e);
  }
  
  // 4. Verificar cookies
  console.log('\nüç™ [Cookies] Verificando cookies...');
  const cookies = document.cookie.split(';');
  console.log('üìä [Cookies] Total de cookies:', cookies.length);
  
  const supabaseCookies = cookies.filter(cookie => cookie.includes('supabase'));
  console.log('üîë [Cookies] Cookies Supabase:', supabaseCookies.length);
  
  console.log('\n' + '='.repeat(50));
  console.log('‚úÖ [Diagnose] Diagn√≥stico conclu√≠do!');
  console.log('üí° [Diagnose] Para testar login, execute: testLogin()');
}

function testLogin() {
  console.log('üîê [Login] Iniciando teste de login...');
  console.log('=' .repeat(50));
  
  // Verificar se h√° formul√°rio de login na p√°gina
  const emailInput = document.querySelector('input[type="email"], input[name="email"]');
  const passwordInput = document.querySelector('input[type="password"], input[name="password"]');
  const loginButton = document.querySelector('button[type="submit"], button:contains("Entrar")');
  
  console.log('üìã [Login] Elementos encontrados:');
  console.log('üìß [Login] Campo email:', emailInput ? '‚úÖ Encontrado' : '‚ùå N√£o encontrado');
  console.log('üîí [Login] Campo password:', passwordInput ? '‚úÖ Encontrado' : '‚ùå N√£o encontrado');
  console.log('üîò [Login] Bot√£o login:', loginButton ? '‚úÖ Encontrado' : '‚ùå N√£o encontrado');
  
  if (emailInput && passwordInput) {
    console.log('\nüß™ [Login] Preenchendo formul√°rio de teste...');
    
    // Preencher campos
    emailInput.value = 'testetotal@teste.com';
    passwordInput.value = 'teste123';
    
    // Disparar eventos
    emailInput.dispatchEvent(new Event('input', { bubbles: true }));
    emailInput.dispatchEvent(new Event('change', { bubbles: true }));
    passwordInput.dispatchEvent(new Event('input', { bubbles: true }));
    passwordInput.dispatchEvent(new Event('change', { bubbles: true }));
    
    console.log('‚úÖ [Login] Campos preenchidos');
    console.log('üí° [Login] Para submeter, execute: submitLogin()');
  } else {
    console.log('‚ùå [Login] Formul√°rio n√£o encontrado na p√°gina atual');
    console.log('üí° [Login] Navegue para a p√°gina de login primeiro');
  }
}

function submitLogin() {
  console.log('üöÄ [Submit] Submetendo formul√°rio...');
  
  const loginButton = document.querySelector('button[type="submit"]') || 
                     document.querySelector('button:contains("Entrar")');
  
  if (loginButton) {
    console.log('üîò [Submit] Clicando no bot√£o...');
    loginButton.click();
    
    // Aguardar e verificar resultado
    setTimeout(() => {
      console.log('üîç [Submit] Verificando resultado...');
      console.log('üìç [Submit] URL atual:', window.location.href);
      console.log('üíæ [Submit] localStorage atualizado:', Object.keys(localStorage).filter(k => k.includes('supabase')));
    }, 2000);
  } else {
    console.log('‚ùå [Submit] Bot√£o de submit n√£o encontrado');
  }
}

function clearSupabaseSession() {
  console.log('üßπ [Clear] Limpando sess√£o Supabase...');
  
  // Limpar localStorage
  const keys = Object.keys(localStorage);
  const supabaseKeys = keys.filter(key => key.includes('supabase'));
  
  supabaseKeys.forEach(key => {
    localStorage.removeItem(key);
    console.log('üóëÔ∏è [Clear] Removido:', key);
  });
  
  // Limpar cookies (se poss√≠vel)
  document.cookie.split(';').forEach(cookie => {
    if (cookie.includes('supabase')) {
      const eqPos = cookie.indexOf('=');
      const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim();
      document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/`;
      console.log('üç™ [Clear] Cookie removido:', name);
    }
  });
  
  console.log('‚úÖ [Clear] Sess√£o limpa!');
  console.log('üîÑ [Clear] Recarregue a p√°gina para aplicar as altera√ß√µes');
}

// Fun√ß√£o para verificar estado atual
function checkCurrentState() {
  console.log('üìä [State] Estado atual da aplica√ß√£o:');
  console.log('=' .repeat(50));
  
  console.log('üìç [State] URL:', window.location.href);
  console.log('üë§ [State] Utilizador logado:', localStorage.getItem('supabase.auth.token') ? 'Sim' : 'N√£o');
  
  // Verificar elementos de erro na p√°gina
  const errorElements = document.querySelectorAll('[class*="error"], [class*="Error"], .text-red-500, .text-danger');
  console.log('‚ùå [State] Elementos de erro:', errorElements.length);
  
  errorElements.forEach((el, index) => {
    console.log(`üîç [State] Erro ${index + 1}:`, el.textContent.trim());
  });
  
  // Verificar elementos de loading
  const loadingElements = document.querySelectorAll('[class*="loading"], [class*="Loading"], [class*="spinner"]');
  console.log('‚è≥ [State] Elementos de loading:', loadingElements.length);
  
  console.log('\nüí° [State] Comandos dispon√≠veis:');
  console.log('   - diagnoseEnvironment() - Diagn√≥stico completo');
  console.log('   - testLogin() - Testar preenchimento de login');
  console.log('   - submitLogin() - Submeter formul√°rio');
  console.log('   - clearSupabaseSession() - Limpar sess√£o');
  console.log('   - checkCurrentState() - Verificar estado atual');
}

// Fun√ß√£o para testar conectividade direta com Supabase
async function testSupabaseConnectivity() {
  console.log('üåê [Connectivity] Testando conectividade com Supabase...');
  console.log('=' .repeat(50));
  
  try {
    // Teste 1: Verificar se o endpoint est√° acess√≠vel
    console.log('üîç [Connectivity] Testando endpoint REST...');
    const restResponse = await fetch(`${SUPABASE_URL}/rest/v1/`, {
      method: 'HEAD',
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      }
    });
    
    console.log('üìä [Connectivity] REST API Status:', restResponse.status);
    console.log('‚úÖ [Connectivity] REST API:', restResponse.ok ? 'Acess√≠vel' : 'Erro');
    
    // Teste 2: Verificar endpoint de autentica√ß√£o
    console.log('\nüîê [Connectivity] Testando endpoint de autentica√ß√£o...');
    const authResponse = await fetch(`${SUPABASE_URL}/auth/v1/settings`, {
      method: 'GET',
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      }
    });
    
    console.log('üìä [Connectivity] Auth API Status:', authResponse.status);
    console.log('‚úÖ [Connectivity] Auth API:', authResponse.ok ? 'Acess√≠vel' : 'Erro');
    
    if (authResponse.ok) {
      const authSettings = await authResponse.json();
      console.log('‚öôÔ∏è [Connectivity] Auth Settings:', authSettings);
    }
    
    // Teste 3: Tentar login direto via API
    console.log('\nüß™ [Connectivity] Testando login direto via API...');
    const loginResponse = await fetch(`${SUPABASE_URL}/auth/v1/token?grant_type=password`, {
      method: 'POST',
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: 'testetotal@teste.com',
        password: 'teste14'
      })
    });
    
    console.log('üìä [Connectivity] Login Status:', loginResponse.status);
    
    if (loginResponse.ok) {
      const loginData = await loginResponse.json();
      console.log('‚úÖ [Connectivity] Login bem-sucedido!');
      console.log('üë§ [Connectivity] Utilizador:', loginData.user?.email);
      console.log('üé´ [Connectivity] Token recebido:', loginData.access_token ? 'Sim' : 'N√£o');
    } else {
      const errorData = await loginResponse.json();
      console.log('‚ùå [Connectivity] Erro no login:', errorData);
    }
    
  } catch (error) {
    console.error('üí• [Connectivity] Erro cr√≠tico:', error);
  }
  
  console.log('\n' + '='.repeat(50));
  console.log('‚úÖ [Connectivity] Teste de conectividade conclu√≠do!');
}

// Fun√ß√£o para testar com biblioteca Supabase carregada dinamicamente
function testWithSupabaseLibrary() {
  console.log('üìö [Supabase Library] Testando com biblioteca Supabase...');
  console.log('=' .repeat(50));
  
  // Tentar carregar a biblioteca dinamicamente
  const script = document.createElement('script');
  script.src = 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2';
  script.onload = async () => {
    console.log('‚úÖ [Supabase Library] Biblioteca carregada');
    
    try {
      const { createClient } = window.supabase;
      const client = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
      
      console.log('üîß [Supabase Library] Cliente criado:', client);
      
      // Testar login
      const { data, error } = await client.auth.signInWithPassword({
        email: 'testetotal@teste.com',
        password: 'teste123'
      });
      
      console.log('üìã [Supabase Library] Resultado login:');
      console.log('‚úÖ Data:', data);
      console.log('‚ùå Error:', error);
      
    } catch (err) {
      console.error('üí• [Supabase Library] Erro:', err);
    }
  };
  
  script.onerror = () => {
    console.error('‚ùå [Supabase Library] Erro ao carregar biblioteca');
  };
  
  document.head.appendChild(script);
}

function testReactLogin() {
  console.log('üîç [React Login] Testando login via React...');
  console.log('=' .repeat(50));
  
  // Verificar se o contexto React est√° dispon√≠vel
  const reactFiberKey = Object.keys(document.querySelector('#root') || {}).find(key => key.startsWith('__reactFiber'));
  
  if (reactFiberKey) {
    console.log('‚úÖ [React Login] React detectado');
    
    // Tentar acessar o contexto de autentica√ß√£o
    try {
      // Simular preenchimento do formul√°rio React
      const emailInput = document.querySelector('input[type="email"]');
      const passwordInput = document.querySelector('input[type="password"]');
      
      if (emailInput && passwordInput) {
        console.log('üìù [React Login] Preenchendo formul√°rio React...');
        
        // Simular input do React
        const setNativeValue = (element, value) => {
          const valueSetter = Object.getOwnPropertyDescriptor(element, 'value')?.set ||
                            Object.getOwnPropertyDescriptor(Object.getPrototypeOf(element), 'value')?.set;
          if (valueSetter) {
            valueSetter.call(element, value);
          }
        };
        
        setNativeValue(emailInput, 'testetotal@teste.com');
        setNativeValue(passwordInput, 'teste123');
        
        // Disparar eventos React
        emailInput.dispatchEvent(new Event('input', { bubbles: true }));
        passwordInput.dispatchEvent(new Event('input', { bubbles: true }));
        
        console.log('‚úÖ [React Login] Formul√°rio preenchido');
        console.log('üí° [React Login] Para submeter, execute: submitReactLogin()');
      } else {
        console.log('‚ùå [React Login] Campos de formul√°rio n√£o encontrados');
      }
    } catch (err) {
      console.error('üí• [React Login] Erro:', err);
    }
  } else {
    console.log('‚ùå [React Login] React n√£o detectado');
  }
}

function submitReactLogin() {
  console.log('üöÄ [React Submit] Submetendo formul√°rio React...');
  
  const submitButton = document.querySelector('button[type="submit"]');
  
  if (submitButton) {
    console.log('üîò [React Submit] Clicando no bot√£o submit...');
    submitButton.click();
    
    // Monitorar mudan√ßas
    setTimeout(() => {
      console.log('üîç [React Submit] Verificando resultado...');
      console.log('üìç [React Submit] URL atual:', window.location.href);
      console.log('üíæ [React Submit] localStorage:', Object.keys(localStorage).filter(k => k.includes('supabase')));
      
      // Verificar se h√° erros na p√°gina
      const errorElements = document.querySelectorAll('[role="alert"], .text-red-600, .text-destructive');
      if (errorElements.length > 0) {
        console.log('‚ùå [React Submit] Erros encontrados:');
        errorElements.forEach(el => console.log('  -', el.textContent));
      }
    }, 3000);
  } else {
    console.log('‚ùå [React Submit] Bot√£o submit n√£o encontrado');
  }
}

function debugLoginFlow() {
  console.log('üõ†Ô∏è [Debug Flow] Iniciando debug completo...');
  console.log('=' .repeat(50));
  
  // 1. Verificar ambiente
  console.log('\n1Ô∏è‚É£ [Debug] Verificando ambiente...');
  diagnoseEnvironment();
  
  // 2. Verificar React
  setTimeout(() => {
    console.log('\n2Ô∏è‚É£ [Debug] Verificando React...');
    testReactLogin();
    
    // 3. Verificar conectividade
    setTimeout(() => {
      console.log('\n3Ô∏è‚É£ [Debug] Verificando conectividade...');
      testSupabaseConnectivity();
      
      // 4. Resumo
      setTimeout(() => {
        console.log('\n4Ô∏è‚É£ [Debug] Resumo do diagn√≥stico:');
        console.log('üìä [Debug] Execute checkCurrentState() para ver o estado atual');
        console.log('üöÄ [Debug] Execute submitReactLogin() para testar o login');
      }, 2000);
    }, 2000);
  }, 2000);
}

// Executar diagn√≥stico inicial
console.log('üîß [Diagn√≥stico] Script carregado. Comandos dispon√≠veis:');
console.log('üìã diagnoseEnvironment() - Verificar vari√°veis e conectividade');
console.log('üîê testLogin() - Testar formul√°rio de login');
console.log('üöÄ submitLogin() - Submeter login preenchido');
console.log('üßπ clearSupabaseSession() - Limpar sess√£o');
console.log('üìä checkCurrentState() - Verificar estado atual');
console.log('üåê testSupabaseConnectivity() - Testar conectividade API');
console.log('üìö testWithSupabaseLibrary() - Testar com biblioteca Supabase');
console.log('üîç testReactLogin() - Testar login via React');
console.log('üõ†Ô∏è debugLoginFlow() - Debug completo do fluxo de login');
console.log('=' .repeat(60));
console.log('\nüöÄ [Diagnose] Execute diagnoseEnvironment() para come√ßar!');