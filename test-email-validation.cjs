// Teste simples para validar o schema de email
const { z } = require('zod');

// Recriar o schema de valida√ß√£o aqui para testar
const emailValidation = z
  .string()
  .min(1, 'Email √© obrigat√≥rio')
  .email('Formato de email inv√°lido')
  .max(254, 'Email demasiado longo')
  .refine(
    (email) => {
      // Verificar se n√£o tem espa√ßos
      return !email.includes(' ');
    },
    { message: 'Email n√£o pode conter espa√ßos' }
  )
  .refine(
    (email) => {
      // Verificar dom√≠nio b√°sico
      const domain = email.split('@')[1];
      return domain && domain.includes('.');
    },
    { message: 'Dom√≠nio de email inv√°lido' }
  );

const signupSchema = z.object({
  email: emailValidation,
  password: z.string().min(6, 'Password deve ter pelo menos 6 caracteres'),
  nome: z.string().min(2, 'Nome deve ter pelo menos 2 caracteres'),
});

// Testes de valida√ß√£o de email
const testCases = [
  { email: 'teste2@teste', expected: false, description: 'Email sem dom√≠nio completo' },
  { email: 'invalid-email-format', expected: false, description: 'Email sem @ e dom√≠nio' },
  { email: 'test@example.com', expected: true, description: 'Email v√°lido' },
  { email: 'user@domain', expected: false, description: 'Email sem TLD' },
  { email: 'test @example.com', expected: false, description: 'Email com espa√ßos' },
  { email: '', expected: false, description: 'Email vazio' }
];

console.log('üß™ Testando valida√ß√£o de email...');

testCases.forEach(({ email, expected, description }) => {
  try {
    const result = signupSchema.parse({
      email: email,
      password: 'validpassword123',
      nome: 'Test User'
    });
    
    if (expected) {
      console.log(`‚úÖ ${description}: PASSOU (como esperado)`);
    } else {
      console.log(`‚ùå ${description}: PASSOU (mas deveria FALHAR)`);
      console.log(`   Email: "${email}" foi aceite incorretamente`);
    }
  } catch (error) {
    if (!expected) {
      console.log(`‚úÖ ${description}: FALHOU (como esperado)`);
      console.log(`   Erro: ${error.errors?.[0]?.message || error.message}`);
    } else {
      console.log(`‚ùå ${description}: FALHOU (mas deveria PASSAR)`);
      console.log(`   Erro: ${error.errors?.[0]?.message || error.message}`);
    }
  }
});

console.log('\nüîç Teste espec√≠fico para "teste2@teste":');
try {
  signupSchema.parse({
    email: 'teste2@teste',
    password: 'teste14',
    nome: 'Test User'
  });
  console.log('‚ùå PROBLEMA: "teste2@teste" foi aceite pela valida√ß√£o!');
} catch (error) {
  console.log('‚úÖ CORRETO: "teste2@teste" foi rejeitado pela valida√ß√£o');
  console.log(`   Erro: ${error.errors?.[0]?.message || error.message}`);
}