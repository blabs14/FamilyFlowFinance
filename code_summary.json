{
  "project_name": "Porta Linda Kit - Family Finance Management",
  "description": "Aplicação de gestão financeira familiar com funcionalidades de orçamentos, transações, metas e colaboração entre membros da família",
  "tech_stack": {
    "frontend": {
      "framework": "React 18",
      "build_tool": "Vite",
      "language": "TypeScript",
      "routing": "React Router DOM",
      "state_management": "React Query (TanStack Query)",
      "ui_library": "Radix UI + shadcn/ui",
      "styling": "Tailwind CSS",
      "icons": "Lucide React",
      "forms": "React Hook Form + Zod",
      "charts": "Recharts",
      "notifications": "Sonner",
      "date_handling": "date-fns"
    },
    "backend": {
      "database": "Supabase (PostgreSQL)",
      "auth": "Supabase Auth",
      "realtime": "Supabase Realtime",
      "storage": "Supabase Storage",
      "edge_functions": "Supabase Edge Functions"
    },
    "testing": {
      "unit_testing": "Vitest",
      "testing_library": "@testing-library/react",
      "e2e_testing": "Cypress",
      "mocking": "MSW (Mock Service Worker)"
    },
    "development": {
      "linting": "ESLint",
      "formatting": "Prettier",
      "git_hooks": "Husky + lint-staged",
      "package_manager": "npm"
    }
  },
  "features": {
    "authentication": {
      "description": "Sistema de autenticação completo com login, registo e recuperação de password",
      "components": ["LoginForm", "RegisterForm", "ForgotPasswordForm", "LogoutButton"],
      "contexts": ["AuthContext"],
      "pages": ["Login", "Register", "ForgotPassword"]
    },
    "family_management": {
      "description": "Gestão de famílias com convites, membros e permissões",
      "components": ["FamilyInviteForm", "FamilyMembersList", "FamilyNotifications", "PendingInvitesList"],
      "features": ["FamilyDashboard", "FamilyMembers", "FamilySettings"],
      "contexts": ["FamilyContext", "FamilyProvider"]
    },
    "account_management": {
      "description": "Gestão de contas bancárias e cartões de crédito",
      "components": ["AccountForm", "AccountList", "CreditCardForm", "CreditCardInfo", "RegularAccountForm"],
      "hooks": ["useAccounts", "useAccountsQuery"]
    },
    "transaction_management": {
      "description": "Gestão de transações financeiras com categorização",
      "components": ["TransactionForm", "TransactionList", "CategoryForm", "CategorySelect"],
      "hooks": ["useTransactionsQuery", "useCategories", "useCategoriesQuery"]
    },
    "budget_management": {
      "description": "Sistema de orçamentos com acompanhamento e alertas",
      "components": ["BudgetForm", "BudgetTable", "BudgetCard"],
      "features": ["PersonalBudgets", "FamilyBudgets"],
      "hooks": ["useBudgets", "useBudgetsQuery"]
    },
    "goals_management": {
      "description": "Gestão de metas financeiras com alocação de fundos",
      "components": ["GoalForm", "GoalAllocationModal", "GoalDeallocationModal", "GoalFundingSection"],
      "features": ["PersonalGoals", "FamilyGoals"],
      "hooks": ["useGoals", "useGoalsQuery", "useGoalAllocations", "useGoalFunding"]
    },
    "fixed_expenses": {
      "description": "Gestão de despesas fixas recorrentes",
      "components": ["FixedExpensesForm", "FixedExpensesList"],
      "hooks": ["useFixedExpensesQuery"]
    },
    "cashflow_management": {
      "description": "Visualização e gestão de fluxo de caixa",
      "components": ["CashflowCalendar", "CashflowList", "CashflowView"]
    },
    "reports_analytics": {
      "description": "Relatórios e análises financeiras com gráficos",
      "components": ["ReportChart", "ReportExport", "PerformanceDashboard"],
      "features": ["PersonalInsights"]
    },
    "notifications_reminders": {
      "description": "Sistema de notificações e lembretes",
      "components": ["NotificationForm", "ReminderForm", "RealTimeNotifications"],
      "hooks": ["useNotificationsQuery", "useRemindersQuery", "useDailyReminderNotifications"]
    },
    "data_import": {
      "description": "Importação de dados financeiros de fontes externas",
      "components": ["MappingForm", "ReceiptPreview", "StagingTable"]
    },
    "payroll_management": {
      "description": "Módulo completo de gestão de folha de pagamento",
      "structure": "Módulo independente com componentes, contextos, hooks, páginas e serviços próprios"
    },
    "settings_profile": {
      "description": "Configurações pessoais e de perfil",
      "components": ["SettingsForm", "ProfileForm"],
      "features": ["PersonalSettings", "FamilySettings"],
      "hooks": ["usePersonalSettings", "useSettingsQuery", "useProfilesQuery"]
    },
    "webhooks_integrations": {
      "description": "Integrações via webhooks",
      "components": ["WebhookForm"]
    }
  },
  "architecture": {
    "patterns": [
      "Component-based architecture",
      "Custom hooks for data fetching",
      "Context providers for state management",
      "Feature-based folder structure",
      "Lazy loading for performance",
      "Error boundaries for error handling"
    ],
    "key_directories": {
      "components": "Componentes reutilizáveis organizados por funcionalidade",
      "features": "Módulos de funcionalidades com estrutura independente",
      "hooks": "Custom hooks para lógica de negócio e data fetching",
      "contexts": "Contextos React para gestão de estado global",
      "services": "Serviços para comunicação com APIs",
      "lib": "Utilitários e configurações",
      "types": "Definições de tipos TypeScript",
      "validation": "Esquemas de validação Zod"
    }
  },
  "database_schema": {
    "main_entities": [
      "users",
      "families",
      "family_members",
      "accounts",
      "transactions",
      "categories",
      "budgets",
      "goals",
      "fixed_expenses",
      "notifications",
      "reminders",
      "webhooks"
    ],
    "security": "Row Level Security (RLS) implementado via Supabase"
  },
  "performance_features": [
    "Lazy loading de componentes",
    "React Query para cache e sincronização",
    "Code splitting por rotas",
    "Optimistic updates",
    "Suspense boundaries",
    "Memoização de componentes pesados"
  ],
  "accessibility_features": [
    "Componentes Radix UI com acessibilidade nativa",
    "Navegação por teclado",
    "ARIA labels e roles",
    "Contraste adequado de cores",
    "Suporte a screen readers"
  ],
  "internationalization": {
    "library": "react-i18next",
    "supported_locales": ["pt-PT", "en-US"],
    "context": "LocaleProvider"
  },
  "testing_coverage": {
    "unit_tests": "Componentes críticos e hooks",
    "integration_tests": "Fluxos de dados e APIs",
    "e2e_tests": "Jornadas de utilizador principais"
  }
}