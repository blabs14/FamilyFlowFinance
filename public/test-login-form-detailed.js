// Script de teste detalhado para o formul√°rio de login React
console.log('üîç [Test] Iniciando teste detalhado do formul√°rio de login...');

// Fun√ß√£o para aguardar elemento aparecer
function waitForElement(selector, timeout = 5000) {
    return new Promise((resolve, reject) => {
        const element = document.querySelector(selector);
        if (element) {
            resolve(element);
            return;
        }

        const observer = new MutationObserver((mutations, obs) => {
            const element = document.querySelector(selector);
            if (element) {
                obs.disconnect();
                resolve(element);
            }
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true
        });

        setTimeout(() => {
            observer.disconnect();
            reject(new Error(`Elemento ${selector} n√£o encontrado em ${timeout}ms`));
        }, timeout);
    });
}

// Fun√ß√£o para testar estrutura da p√°gina
function testPageStructure() {
    console.log('\nüìã [Test] Verificando estrutura da p√°gina...');
    
    const results = {
        root: !!document.querySelector('#root'),
        card: !!document.querySelector('[class*="card"]'),
        form: !!document.querySelector('form'),
        emailInput: !!document.querySelector('input[type="email"]'),
        passwordInput: !!document.querySelector('input[type="password"]'),
        submitButton: !!document.querySelector('button[type="submit"]'),
        loginForm: !!document.querySelector('form'),
        reactComponents: !!document.querySelector('[data-reactroot], [data-react-helmet]')
    };
    
    console.log('üîç Estrutura encontrada:');
    Object.entries(results).forEach(([key, found]) => {
        console.log(`  ${found ? '‚úÖ' : '‚ùå'} ${key}: ${found}`);
    });
    
    return results;
}

// Fun√ß√£o para testar elementos espec√≠ficos do formul√°rio
function testFormElements() {
    console.log('\nüéØ [Test] Verificando elementos espec√≠ficos do formul√°rio...');
    
    const form = document.querySelector('form');
    if (!form) {
        console.log('‚ùå Formul√°rio n√£o encontrado');
        return { success: false, error: 'Formul√°rio n√£o encontrado' };
    }
    
    console.log('‚úÖ Formul√°rio encontrado');
    console.log('üìù Atributos do formul√°rio:', {
        id: form.id,
        className: form.className,
        method: form.method,
        action: form.action
    });
    
    const inputs = form.querySelectorAll('input');
    const buttons = form.querySelectorAll('button');
    
    console.log(`üìä Inputs encontrados: ${inputs.length}`);
    inputs.forEach((input, index) => {
        console.log(`  Input ${index + 1}:`, {
            type: input.type,
            name: input.name,
            id: input.id,
            placeholder: input.placeholder
        });
    });
    
    console.log(`üîò Bot√µes encontrados: ${buttons.length}`);
    buttons.forEach((button, index) => {
        console.log(`  Bot√£o ${index + 1}:`, {
            type: button.type,
            textContent: button.textContent.trim(),
            disabled: button.disabled
        });
    });
    
    const emailInput = form.querySelector('input[type="email"]');
    const passwordInput = form.querySelector('input[type="password"]');
    const submitButton = form.querySelector('button[type="submit"]');
    
    const success = !!(emailInput && passwordInput && submitButton);
    
    return {
        success,
        form,
        emailInput,
        passwordInput,
        submitButton,
        inputCount: inputs.length,
        buttonCount: buttons.length
    };
}

// Fun√ß√£o para testar React DevTools
function testReactDevTools() {
    console.log('\n‚öõÔ∏è [Test] Verificando React...');
    
    const results = {
        reactInternals: !!(window.React || document.querySelector('[data-reactroot]')),
        reactDevTools: !!(window.__REACT_DEVTOOLS_GLOBAL_HOOK__),
        reactFiber: !!document.querySelector('#root')?._reactInternalFiber
    };
    
    console.log('üîç React detectado:', results);
    return results;
}

// Fun√ß√£o para testar intera√ß√£o com o formul√°rio
async function testFormInteraction() {
    console.log('\nüéÆ [Test] Testando intera√ß√£o com formul√°rio...');
    
    try {
        const formData = testFormElements();
        if (!formData.success) {
            return { success: false, error: 'Formul√°rio n√£o encontrado para teste de intera√ß√£o' };
        }
        
        const { emailInput, passwordInput, submitButton } = formData;
        
        // Testar preenchimento dos campos
        console.log('üìù Testando preenchimento dos campos...');
        
        if (emailInput) {
            emailInput.focus();
            emailInput.value = 'teste@exemplo.com';
            emailInput.dispatchEvent(new Event('input', { bubbles: true }));
            emailInput.dispatchEvent(new Event('change', { bubbles: true }));
            console.log('‚úÖ Campo email preenchido');
        }
        
        if (passwordInput) {
            passwordInput.focus();
            passwordInput.value = 'senha123';
            passwordInput.dispatchEvent(new Event('input', { bubbles: true }));
            passwordInput.dispatchEvent(new Event('change', { bubbles: true }));
            console.log('‚úÖ Campo password preenchido');
        }
        
        // Verificar se o bot√£o est√° habilitado
        console.log('üîò Estado do bot√£o submit:', {
            disabled: submitButton?.disabled,
            textContent: submitButton?.textContent?.trim()
        });
        
        return {
            success: true,
            emailFilled: !!emailInput?.value,
            passwordFilled: !!passwordInput?.value,
            buttonEnabled: !submitButton?.disabled
        };
        
    } catch (error) {
        console.error('‚ùå Erro no teste de intera√ß√£o:', error);
        return { success: false, error: error.message };
    }
}

// Fun√ß√£o principal de teste
async function runCompleteTest() {
    console.log('üöÄ [Test] Iniciando teste completo do formul√°rio de login...');
    
    try {
        const results = {
            pageStructure: testPageStructure(),
            reactDevTools: testReactDevTools(),
            formElements: testFormElements(),
            formInteraction: await testFormInteraction()
        };
        
        console.log('\nüìä [Test] RESUMO DOS RESULTADOS:');
        console.log('='.repeat(50));
        
        console.log('üìã Estrutura da p√°gina:', results.pageStructure.form ? '‚úÖ' : '‚ùå');
        console.log('‚öõÔ∏è React detectado:', results.reactDevTools.reactInternals ? '‚úÖ' : '‚ùå');
        console.log('üéØ Elementos do formul√°rio:', results.formElements.success ? '‚úÖ' : '‚ùå');
        console.log('üéÆ Intera√ß√£o funcional:', results.formInteraction.success ? '‚úÖ' : '‚ùå');
        
        if (!results.formElements.success) {
            console.log('\nüö® PROBLEMA IDENTIFICADO: Formul√°rio n√£o encontrado ou mal formado');
            console.log('üí° Poss√≠veis causas:');
            console.log('  - Componente LoginForm n√£o est√° a ser renderizado');
            console.log('  - Erro no contexto de autentica√ß√£o');
            console.log('  - Problema no roteamento React');
            console.log('  - Erro de JavaScript a impedir renderiza√ß√£o');
        }
        
        return results;
    } catch (error) {
        console.error('‚ùå Erro no teste completo:', error);
        return { error: error.message };
    }
}

// Exportar fun√ß√µes para uso no console
window.testPageStructure = testPageStructure;
window.testFormElements = testFormElements;
window.testReactDevTools = testReactDevTools;
window.testFormInteraction = testFormInteraction;
window.runCompleteTest = runCompleteTest;
window.waitForElement = waitForElement;

console.log('‚úÖ [Test] Script carregado! Fun√ß√µes dispon√≠veis:');
console.log('- testPageStructure() - Verifica estrutura da p√°gina');
console.log('- testFormElements() - Verifica elementos do formul√°rio');
console.log('- testReactDevTools() - Verifica React');
console.log('- testFormInteraction() - Testa intera√ß√£o');
console.log('- runCompleteTest() - Executa todos os testes');
console.log('\nüöÄ Execute: runCompleteTest()');